name: CI/CD for FastAPI Application

on:
  push:  # This will run on any branch push
  pull_request:  # This will run on pull requests to any branch

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password  # Keeping the password unchanged as per your request
          POSTGRES_DB: stocks_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Step 3: Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Verify that the LSTM model file exists
      - name: Verify model file exists
        run: ls -l models/lstm_model.h5  # Adjust the path to where your model is stored

      # Step 6: Wait for PostgreSQL to be ready and run tests
      - name: Run tests
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -U user; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          # Run pytest to test the FastAPI endpoints
          pytest ./notebooks/test_api.py  # Adjust this path to your test file location

      # Step 7: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t aleksandrarancic/myapi:latest .  # Adjust the Docker tag and context if necessary

      # Step 8: Log in to Docker Hub
        run: |
          echo "Stock@Investigations2024.MLOps" | docker login -u "aleksandrarancic" --password-stdin

      # Step 9: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push aleksandrarancic/myapi:latest  # Push the image to your Docker Hub repository
